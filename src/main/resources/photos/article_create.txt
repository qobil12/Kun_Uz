
 public ArticleDTO getDTO(ArticleEntity entity) {

        ArticleDTO dto = new ArticleDTO();

        dto.setUuid(entity.getId());
        dto.setCreatedDate(entity.getCreatedDate());
        dto.setContent(entity.getContent());
        dto.setDescription(entity.getDescription());
        dto.setPublishDate(entity.getPublishDate());
        dto.setSharedCount(entity.getSharedCount());
        dto.setStatus(entity.getStatus());
        dto.setTitle(entity.getTitle());
        dto.setViewCount(entity.getViewCount());
        dto.setVisible(entity.getVisible());

        dto.setCategoryDTO(categoryService.getCategoryDTO(entity.getCategory()));

        dto.setRegionDTO(regionService.getRegionDTO(entity.getRegion()));

        dto.setModeratorId(profileService.getProfileDTOById(entity.getModerator().getId()));

        if (entity.getPublisher() != null) {
            dto.setPublisherId(profileService.getProfileDTOById(entity.getPublisher().getId()));
        }

        dto.setTagDTOList(articleTagService.getTagListByArticle(entity));

        dto.setTypeDTOList(articleTypeService.getTypeByArticle(entity));

        return dto;
    }

    public ArticleDTO create(ArticleCreateDTO dto, Integer profileId) {

        ArticleEntity entity = new ArticleEntity();
        getArticleEntity(entity, dto, profileId);

        articleRepository.save(entity);

        articleTypeService.create(entity, dto.getTypesList());

        articleTagService.create(entity, dto.getTagList());

        return getDTO(entity);

    }

    private ArticleEntity getArticleEntity(ArticleEntity entity, ArticleCreateDTO dto, Integer profileId) {

        entity.setTitle(dto.getTitle());
        entity.setContent(dto.getContent());
        entity.setDescription(dto.getDescription());

        RegionEntity region = regionService.get(dto.getRegionId());
        entity.setRegion(region);

        CategoryEntity category = categoryService.get(dto.getCategoryId());
        entity.setCategory(category);

        ProfileEntity moderator = new ProfileEntity();
        moderator.setId(profileId);
        entity.setModerator(moderator);
        entity.setStatus(ArticleStatus.NOT_PUBLISHED);

        return entity;
    }